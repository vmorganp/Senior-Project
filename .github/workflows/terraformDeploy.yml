name: terraform deploy

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    

    steps:
    - uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    # Lint the python to make sure it's syntax error free
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source

    # Required to push a new docker image to ecr
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.access_key }}
        aws-secret-access-key: ${{ secrets.secret_key }}
        aws-region: us-east-1

    # Also required to push a new docker image to ecr
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # push the container to ecr
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/repiece-${GITHUB_REF##*/}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/repiece-${GITHUB_REF##*/}:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/repiece-${GITHUB_REF##*/}:$IMAGE_TAG"

    # install terraform so we can use it in the next step
    - name: Install Terraform
      uses: little-core-labs/install-terraform@v1.0.0
      with:
        version: 0.12.24

    # Do the actual terraform plans and applies
    - name: apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.secret_key }}
        IMAGE: ${{ steps.build-image.outputs.image }}
      run: |
        echo $IMAGE
        export branch=${GITHUB_REF##*/}
        echo $branch 
        terraform init -no-color -backend-config="bucket=${{ secrets.bucket_location }}" -backend-config="key=$branch/${{ secrets.state_location }}"
        terraform apply -no-color -auto-approve -var "branch=$branch" -var "image=$IMAGE"
